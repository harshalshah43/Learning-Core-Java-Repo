Lecture - 2025-05-19

Topics - DATATYPES IN JAVA

Extension to download: Extension Pack for Java (Optional)

Primitive Dataypes:- Built in datatypes supported by java. Stores values directly in the memory. They are not treated as objects in Java

| Data Type | Size           | Description                          | Example             |
| --------- | -------------- | ------------------------------------ | ------------------- |
| `byte`    | 1 byte (8-bit) | Whole numbers from -128 to 127       | `byte b = 100;`     |
| `short`   | 2 bytes        | Whole numbers from -32,768 to 32,767 | `short s = 5000;`   |
| `int`     | 4 bytes        | Whole numbers (most common)          | `int x = 10;`       |
| `long`    | 8 bytes        | Larger whole numbers                 | `long l = 100000L;` |
| `float`   | 4 bytes        | Decimal numbers (less precision)     | `float f = 5.6f;`   |
| `double`  | 8 bytes        | Decimal numbers (higher precision)   | `double d = 3.14;`  |
| `char`    | 2 bytes        | Single character (Unicode)           | `char c = 'A';`     |
| `boolean` | \~1 bit        | Only `true` or `false`               | `boolean b = true;` |


Features:-
- Fast and memory-efficient
- Stored directly on the stack
- Cannot be null

Non Primitive Dataypes - Derived Datatypes, These are objects or references to objects
| Type       | Description                                 | Example                        |
| ---------- | ------------------------------------------- | ------------------------------ |
| `String`   | Sequence of characters                      | `String s = "Hello";`          |
| Arrays     | Collection of elements of same type         | `int[] arr = {1,2,3};`         |
| Classes    | User-defined templates for objects          | `Employee e = new Employee();` |
| Interfaces | Abstract contracts for classes to implement | `Runnable r = () -> {};`       |
| Enums      | Constants in form of named values           | `enum Day {MON, TUE};`         |

Features:-

- Stored as references on the heap
- Can be null
- More flexible and powerful
- Require new keyword (except String literals and arrays)

üî∏ Key Differences

| Feature         | Primitive         | Non-Primitive       |
| --------------- | ----------------- | ------------------- |
| Stored as       | Actual value      | Reference (pointer) |
| Can be `null`?  | ‚ùå No              | ‚úÖ Yes            |
| Memory location | Stack             | Heap                |
| Customizability | Fixed by language | Can be user-defined |
| Examples        | `int`, `double`   | `String`, `Array`   |


Type Casting in Java:- 
- Lower datatypes automatically converted to higher datatypes
    - int to float or higher
    - float to double or higher
    and so on

- Explicit Type Conversion
    - Value is forcibly converted to a particular datatype.
    - This is not always possibe. Only happens with compatible datatpyes.
      Examples where type casting is possible
        - long to int,float,byte,double and vice versa
        double d = 9.78;
        int i = (int) d;

        Caution!
        int x = 130;
        byte b = (byte) x; //is stored as -126 due to overflow, Please refer type casting notes

===THANK YOU===